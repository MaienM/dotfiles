servers = (
  {
    address = "irc.freenode.net";
    chatnet = "Freenode";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);

chatnets = {
  Freenode = {
    type = "IRC";
    autosendcmd = "/^msg nickserv identify $DotSecrets: ident$  };
};


channels = (
  { name = "#gizmokid2005"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#maienm"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#vim"; chatnet = "Freenode"; autojoin = "yes"; }
);

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "%4{sb {sbnickmode $cumode}%9$N%9{sbmode $usermode} %b%0{sbaway $A}}";


    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $tag/$itemname{sbmode $M}} %C%n ";
    window_empty = "{sb {sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";

    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    # Powerline
    lag = "{sb %r%w%1 ⌚ $0 %r%0%n}";
    act = "{sb %y%0%n%3 %F$0%F %n}";
    more = "%c%0%n%6 more ⬇ %c%0%n";


  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        otr = { };
        usercount = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {

      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
	  
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {

      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";

      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {

      type = "root";
      placement = "top";
      position = "1";
      visible = "always";

      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  core = {
    real_name = "Michon van Dooren";
    user_name = "MaienM";
    nick = "MaienM";
    timestamp_format = "%H:%M:%S";
    log_timestamp = "%H:%M:%S";
  };
  "fe-common/core" = {
    autolog = "yes";
    bell_beeps = "yes";
    beep_msg_level = "MSGS NOTICES DCC DCCMSGS HILIGHT";
	theme = "solarized-powerline";
	hilight_color = "%R";
  };
  "perl/core/scripts" = {
    ### For Solarized adv_windowlist.pl script
    awl_block = "-20";
    awl_sbar_maxlength = "on";
    awl_hide_empty = "yes";
    awl_mouse = "yes";
    awl_viewer = "no";
    #fancy_abbrev = "head";

    ### For Solarized trackbar.pl script
    trackbar_style = "%B";
    title_screen_window = "yes";
    awl_shared_sbar = "OFF";
  };
  "irc/core" = { alternate_nick = "MaienM_"; };
};

hilights = (
  { text = "MaienM"; nick = "yes"; word = "yes"; },
);

ignores = (
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#vim" ); }
);

windows = {
  1 = { immortal = "yes"; name = "(status)"; level = "ALL"; };
  2 = { name = "hilight"; sticky = "yes"; };
  3 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#gizmokid2005";
        tag = "Freenode";
      }
    );
  };
  4 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#maienm";
        tag = "Freenode";
      }
    );
  };
  5 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#vim";
        tag = "Freenode";
      }
    );
  };
};
