#!/usr/bin/env bash

# Randomly assigns backgrounds to all monitors.
#
# For each monitor, it will pick a background that fits reasonably well, and then cut & scale it to fit.

bgpath="$HOME/.local/share/backgrounds"
cachepath="$HOME/.local/share/backgrounds/.cache"

set -e

if [ ! -d "$bgpath" ]; then
	echo >&2 "No backgrounds available."
	exit 1
fi

m() {
	bc <<< "scale=10; $1"
}

# Setup ranges of ratios that are grouped together.
ratios=(
	landscape "$(m 16/8)" "$(m 16/11)"
	portrait "$(m 11/16)" "$(m 8/16)"
	other 0 999999999
)
get_ratio() {
	local ratio i
	ratio="$(m "$1/$2")"
	for ((i=0; i<${#ratios[@]}; i+=3)); do
		[ "$(m "(${ratios[i+1]} >= $ratio) + ($ratio >= ${ratios[i+2]})")" -eq 2 ] || continue
		echo "${ratios[i]}"
		return
	done
	echo "other"
}

update_cache() {
	echo ">>> Updating background cache."
	feh --recursive "$bgpath" --customlist '%f\n%w\n%h' 2> /dev/null > "$cachepath"
}

# Update the cache.
if [ -f "$cachepath" ]; then
	trap 'update_cache' 0 1
else 
	update_cache
fi

# Split backgrounds in groups based on ratios (portrait, landscape, other).
echo ">>> Reading background info from cache."
# shellcheck disable=SC2207
mapfile -t fehoutput < "$cachepath"
for ((i=0; i<${#fehoutput[@]}; i+=3)); do
	[ -f "${fehoutput[i]}" ] || continue # File was deleted since the cache was last updated.
	ratio="$(get_ratio "${fehoutput[i+1]}" "${fehoutput[i+2]}")"
	declare -n "paths=bg_$ratio"
	paths=("${paths[@]}" "${fehoutput[i]}")
	bg_all=("${bg_all[@]}" "${fehoutput[i]}")
done

# Validate & log the groups.
if [ "${#bg_all[@]}" -eq 0 ]; then
	echo >&2 "No backgrounds found."
	exit 1
fi
for ((i=0; i<${#ratios[@]}; i+=3)); do
	ratio="${ratios[i]}"
	declare -n "paths=bg_$ratio"
	printf 'Found %i %s background(s).' "${#paths[@]}" "$ratio"
	if [ "${#paths[@]}" -eq 0 ]; then
		paths=("${bg_all[@]}")
		printf ' Falling back to using all background(s) for this ratio.'
	fi
	printf '\n'
done

# For each monitor, pick a random background.
echo ">>> Applying random background to each monitor."
cmd=feh
while read -ra moninfo; do
	ratio="$(get_ratio "${moninfo[2]}" "${moninfo[4]}")"
	declare -n "paths=bg_$ratio"
	path="$(printf '%s\n' "${paths[@]}" | shuf -n1)"
	echo "Picked '$path' from ($ratio) for ${moninfo[6]}."
	cmd="$(printf '%s --bg-fill %s' "$cmd" "$path")"
done < <(xrandr --listactivemonitors | tr '/x' ' ' | tail -n+2)
$cmd

