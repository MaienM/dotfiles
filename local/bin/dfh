#!/usr/bin/env bash

set -o errexit -o pipefail

if [ -n "$1" ]; then
	controlpath="$HOME/.ssh-control-$RANDOM"
	sshargs=("$@")
	ssh "${sshargs[@]}" -o ControlMaster=yes -o ControlPersist=30s -o ControlPath="$controlpath" 'true'
	trap 'ssh "${sshargs[@]}" -o ControlPath="$controlpath" -O exit > /dev/null' EXIT
	ontarget() {
		ssh "${sshargs[@]}" -o ControlPath="$controlpath" "$@"
	}
else
	ontarget() {
		"$@"
	}
fi

color_fg_black=$(tput setaf 0)
color_fg_red=$(tput setaf 1)
color_fg_green=$(tput setaf 2)
color_fg_yellow=$(tput setaf 3)
color_reverse=$(tput rev)
color_reset=$(tput sgr0)

names=(B KiB MiB GiB TiB PiB EiB ZiB YiB)
# Format size in bytes into a more readable unit.
format_size() {
	size=$1
	step=0
	while [ "${size%.*}" -ge 1024 ] && [ "$step" -lt "$((${#names[@]} - 1))" ]; do
		size="$(calc "$size / 1024")"
		step=$((step + 1))
	done
	printf '%.2f%s' "$size" "${names[$step]}"
}

declare -A properties
# Shorthand to get a property.
p() {
	echo "${properties[$1]}"
}
# Shorthand to do a calculation using property names.
c() {
	expression="$1"
	for prop in "${!properties[@]}"; do
		expression="${expression//$prop/${properties[$prop]}}"
	done
	echo "scale=10; $expression" | bc
}

# Shorthands for the above + format_size.
ps() {
	format_size "$(p "$1")"
}
cs() {
	format_size "$(c "$1")"
}

get_mount_column() {
	ontarget df --output="$1" --block-size=1 -x zfs -x tmpfs -x devtmpfs -x squashfs -x overlay | tail -n+2
}

get_usage_color() {
	used="$(echo "scale=0; ($(p pctused) + 0.5) / 1" | bc)"
	if [ "$used" -gt 90 ]; then
		echo "${color_fg_red}${color_reverse}"
	elif [ "$used" -gt 70 ]; then
		echo "${color_fg_red}"
	elif [ "$used" -gt 40 ]; then
		echo "${color_fg_yellow}"
	else
		echo "${color_fg_green}"
	fi
}

(
	mapfile -t list_volume < <(get_mount_column source)
	mapfile -t list_mountpoint < <(get_mount_column target)
	mapfile -t list_used < <(get_mount_column used)
	mapfile -t list_available < <(get_mount_column avail)
	for i in {0..999}; do
		[ "$i" -lt "${#list_volume[@]}" ] || break

		volume="${list_volume[$i]}"
		mountpoint="${list_mountpoint[$i]}"
		used="${list_used[$i]}"
		total="$((list_used[i] + list_available[i]))"

		unset properties
		declare -A properties

		properties[used]="$used"
		properties[total]="$total"
		properties[mountpoint]="$mountpoint"
		properties[pctused]="$(c "100 * used / total")"

		printf '%s | %s | %s%s/%s (%.1f%%)%s\n' \
			"$volume" \
			"$mountpoint" \
			"$(get_usage_color)" \
			"$(ps used)" \
			"$(ps total)" \
			"$(p pctused)" \
			"${color_reset}"
	done

	if ontarget command -v zfs > /dev/null 2>&1; then
		mapfile -t volumes < <(ontarget zfs list -H -o name)
		for volume in "${volumes[@]}"; do
			unset properties
			declare -A properties

			while read -r prop value; do
				properties+=(["$prop"]="$value")
			done < <(ontarget zfs get -Hp -o property,value used,available,compressratio,usedbydataset,mountpoint "$volume")
			properties[total]="$(c "used + available")"
			properties[pctused]="$(c "100 * used / total")"

			case "$(p mountpoint)" in
				legacy) properties[mountpoint]="$(
					ontarget mount \
						| awk -v name="$volume" '{ if ($1 == name && $5 == "zfs") { print $3; exit } }'
				)" ;;
				none) properties[mountpoint]= ;;
			esac

			if [[ $volume == */* ]]; then
				volume="$color_fg_black${volume%/*}$color_reset/${volume##*/}"
			fi

			printf '%s | %s | %s%s/%s (%.1f%%)%s | (%s self) | compression %.2fx, effective %s/%s\n' \
				"$volume" \
				"$(p mountpoint)" \
				"$(get_usage_color)" \
				"$(ps used)" \
				"$(ps total)" \
				"$(p pctused)" \
				"${color_reset}" \
				"$(ps usedbydataset)" \
				"$(p compressratio)" \
				"$(cs "used * compressratio")" \
				"$(cs "total * compressratio")"
		done
	fi
) | column -t -s '|'
