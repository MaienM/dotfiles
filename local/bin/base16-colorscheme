#!/usr/bin/env cached-nix-shell
#!nix-shell -i python
#!nix-shell -p python3
#!nix-shell -p python3.pkgs.chevron
#!nix-shell -p python3.pkgs.colour
#!nix-shell -p python3.pkgs.pydantic
#!nix-shell -p python3.pkgs.requests
#!nix-shell -p python3.pkgs.rich
#!nix-shell -p python3.pkgs.ruamel-yaml
#!nix-shell -p python3.pkgs.toposort
# vi:ft=python

import logging
from argparse import ArgumentParser
from dataclasses import field
from glob import glob
from io import BytesIO, StringIO
from pathlib import Path
from shutil import rmtree
from subprocess import PIPE, STDOUT, run
from sys import exit, stderr
from textwrap import dedent
from zipfile import ZipFile

import chevron
import pygments.token as pygtok
import requests
import ruamel.yaml
from colour import Color
from pydantic import validator
from pydantic.dataclasses import dataclass
from rich.containers import Lines
from rich.live import Live
from rich.panel import Panel
from rich.spinner import Spinner
from rich.style import Style
from rich.styled import Styled
from rich.syntax import ANSISyntaxTheme, Syntax
from rich.table import Table
from rich.text import Text
from rich.traceback import Traceback
from toposort import toposort_flatten as toposort

log = logging.getLogger()


ICON_OK = "✔"
ICON_NOTOK = "✖"
ICON_SKIP = ""
ICON_SAVE = ""
ICON_RUN = ""


CONFIG_DIR = Path.home() / ".config" / "base16"
CACHE_DIR = Path.home() / ".cache" / "base16"


def make_syntax_theme(colors) -> ANSISyntaxTheme:
	theme = ANSISyntaxTheme(
		{
			pygtok.Token: Style(),
			pygtok.Whitespace: Style(),
			pygtok.Comment: Style(color=colors["base03"]),
			pygtok.Comment.Preproc: Style(color=colors["base03"], bold=True),
			pygtok.Keyword: Style(color=colors["base0E"]),
			pygtok.Operator: Style(color=colors["base05"]),
			pygtok.Name.Builtin: Style(color=colors["base0E"]),
			pygtok.Name.Function: Style(color=colors["base0D"]),
			pygtok.Name.Namespace: Style(color=colors["base0C"]),
			pygtok.Name.Class: Style(color=colors["base0A"]),
			pygtok.Name.Exception: Style(color=colors["base08"]),
			pygtok.Name.Decorator: Style(color=colors["base0E"]),
			pygtok.Name.Variable: Style(color=colors["base08"]),
			pygtok.Name.Constant: Style(color=colors["base09"]),
			pygtok.Name.Attribute: Style(color=colors["base0D"]),
			pygtok.Name.Tag: Style(color=colors["base08"]),
			pygtok.String: Style(color=colors["base0B"]),
			pygtok.Number: Style(color=colors["base09"]),
			pygtok.Generic.Deleted: Style(color=colors["base08"]),
			pygtok.Generic.Inserted: Style(color=colors["base0B"]),
			pygtok.Generic.Changed: Style(color=colors["base0E"]),
			pygtok.Generic.Heading: Style(bold=True),
			pygtok.Generic.Subheading: Style(bold=True, dim=True),
			pygtok.Generic.Prompt: Style(bold=True),
			pygtok.Generic.Error: Style(color=colors["base08"], bold=True),
			pygtok.Error: Style(color=colors["base08"], bold=True),
		}
	)
	theme._background_style = Style(bgcolor=colors["base00"])
	theme._border_style = Style(color=colors["base05"], bgcolor=colors["base00"])
	return theme


# Syntax theme that uses the current color palette of the terminal. This assumes the terminal is base16, the colors might not make sense if this isn't true.
CURRENT_SYNTAX_THEME = make_syntax_theme(
	{
		"base00": "color(0)",
		"base01": "color(18)",
		"base02": "color(19)",
		"base03": "color(8)",
		"base04": "color(20)",
		"base05": "color(7)",
		"base06": "color(21)",
		"base07": "color(15)",
		"base08": "color(1)",
		"base09": "color(16)",
		"base0A": "color(3)",
		"base0B": "color(2)",
		"base0C": "color(6)",
		"base0D": "color(4)",
		"base0E": "color(5)",
		"base0F": "color(17)",
	}
)


# Sample code to preview the theme. Should ideally be exactly 16 lines as it will be shown next to a list of the 16 colors in the theme.
SAMPLE_CODE = (
	"rust",
	dedent(
		"""
		#[derive(Debug)]
		pub enum State {
			Start,
			Transient,
			Closed,
		}

		impl From<&'a str> for State {
			fn from(s: &'a str) -> Self {
				match s {
					"start" => State::Start,
					"closed" => State::Closed,
					_ => unreachable!(),
				}
			}
		}
	"""
	).strip(),
)


def yaml_load(file: StringIO) -> dict:
	yaml = ruamel.yaml.YAML(typ="safe")
	return yaml.load(file)


def yaml_load_file(path: Path) -> dict:
	with open(path, "r") as f:
		return yaml_load(f)


def yaml_save_file(path: Path, data: dict):
	yaml = ruamel.yaml.YAML(typ="safe")
	with open(path, "w") as f:
		return yaml.dump(data, f)


class SchemeColor(Color):
	@classmethod
	def __get_validators__(cls):
		yield cls.validate

	@classmethod
	def validate(cls, value):
		if not isinstance(value, str):
			raise TypeError("string required")
		elif len(value) != 6:
			raise ValueError("must be exactly 6 characters")
		elif set(value) - set("0123456789abcdefABCDEF"):
			raise ValueError("must only contain hexadecimal characters")
		return cls(f"#{value}")


@dataclass
class Scheme:
	scheme: str
	author: str
	base00: SchemeColor
	base01: SchemeColor
	base02: SchemeColor
	base03: SchemeColor
	base04: SchemeColor
	base05: SchemeColor
	base06: SchemeColor
	base07: SchemeColor
	base08: SchemeColor
	base09: SchemeColor
	base0A: SchemeColor
	base0B: SchemeColor
	base0C: SchemeColor
	base0D: SchemeColor
	base0E: SchemeColor
	base0F: SchemeColor

	@property
	def vars(self) -> dict:
		vars = {
			"scheme-name": self.scheme,
			"scheme-slug": self.scheme.lower().replace(" ", "-"),
			"scheme-author": self.author,
		}
		for i in range(0, 16):
			name = f"base{i:02X}"
			color = getattr(self, name)
			(r, g, b) = (color.hex_l[1:3], color.hex_l[3:5], color.hex_l[5:7])
			vars.update(
				{
					f"{name}-hex": f"{r}{g}{b}",
					f"{name}-hex-bgr": f"{b}{g}{r}",
					f"{name}-hex-r": r,
					f"{name}-hex-g": g,
					f"{name}-hex-b": b,
					f"{name}-rgb-r": int(r, 16),
					f"{name}-rgb-g": int(g, 16),
					f"{name}-rgb-b": int(b, 16),
					f"{name}-dec-r": color.red,
					f"{name}-dec-g": color.green,
					f"{name}-dec-b": color.blue,
					f"{name}-hsl-h": color.hue,
					f"{name}-hsl-s": color.saturation,
					f"{name}-hsl-l": color.luminance,
				}
			)
		return vars

	@property
	def syntax_theme(self) -> ANSISyntaxTheme:
		colors = {}
		for i in range(0, 16):
			name = f"base{i:02X}"
			color = getattr(self, name)
			colors[name] = color.hex_l
		return make_syntax_theme(colors)


class Schemes:
	ZIP_URL = (
		"https://github.com/tinted-theming/base16-schemes/archive/refs/heads/main.zip"
	)
	INDEX = CACHE_DIR / "index.yaml"

	_index: dict[str, str]

	def __init__(self, index={}, is_from_init=False):
		assert is_from_init, "Should not be initialized directly, use  .init()."
		self._index = index

	@classmethod
	def init(cls):
		if cls.INDEX.exists():
			log.info("Loading cached schemes...")
			return cls(yaml_load_file(cls.INDEX), is_from_init=True)
		else:
			log.info("Schemes not yet cached, updating now...")
			cls._update_schemes()
			return cls(cls._calculate_index(), is_from_init=True)

	def get(self, name: str) -> Scheme:
		if name not in self._index:
			log.info(f"Unknown scheme {name}. Valid options:")
			for name in self._index:
				log.info(f"- {name}")
			exit(1)

		data = yaml_load_file(CACHE_DIR / self._index[name])
		return Scheme(**data)

	@classmethod
	def _update_schemes(cls) -> None:
		response = requests.get(cls.ZIP_URL)
		response.raise_for_status()
		with BytesIO(response.content) as data, ZipFile(data) as zipfile:
			zipfile.extractall(CACHE_DIR)

	@classmethod
	def _calculate_index(cls) -> dict:
		index = {}
		for schemepath in glob(
			"base16-schemes-main/*.yaml", root_dir=CACHE_DIR, recursive=True
		):
			name = Path(schemepath).stem
			if name in index:
				raise Exception(
					f"Found multiple schemes with the same name: {index[name]} {schemepath}"
				)
			index[name] = schemepath

		yaml_save_file(cls.INDEX, index)
		return index


@dataclass
class Template:
	input: Path
	output: Path

	@validator("input")
	def _resolve_input(cls, value):
		if not isinstance(value, Path):
			raise TypeError("must be a path")
		return CONFIG_DIR / value

	@validator("output")
	def _resolve_output(cls, value):
		if not isinstance(value, Path):
			raise TypeError("must be a path")
		value = value.expanduser()
		if not value.is_absolute():
			raise ValueError("cannot be a relative path")
		return value

	def render(self, scheme: Scheme, dry_run: bool = False) -> bool:
		with open(self.input, "r") as f:
			rendered = chevron.render(f, scheme.vars)
		try:
			with open(self.output, "r") as f:
				if f.read() == rendered:
					return False
		except FileNotFoundError:
			pass
		if not dry_run:
			with open(self.output, "w") as f:
				f.write(rendered)
		return True


@dataclass
class Application:
	templates: list[Template] = field(default_factory=list)
	hook: str | None = field(default=None)
	hookRunAlways: bool = field(default=False)
	dependsOn: list[str] = field(default_factory=list)


@dataclass
class Config:
	FILE = CONFIG_DIR / "config.yaml"

	applications: dict[str, Application]
	aliases: dict[str, str] = field(default_factory=dict)

	@classmethod
	def load(cls):
		try:
			log.info(f"Loading config [cyan]{Config.FILE}[/].")
			return cls(**yaml_load_file(cls.FILE))
		except FileNotFoundError:
			log.error("[red]Config file does not exist.[/]")


class Grid(Table):
	def __init__(self, *args, **kwargs):
		newkwargs = dict(
			box=None,
			padding=0,
			collapse_padding=True,
			show_header=False,
			show_footer=False,
			show_edge=False,
			pad_edge=False,
			expand=False,
		)
		newkwargs.update(kwargs)
		super().__init__(*args, **newkwargs)


class VBox(Grid):
	def add(self, renderable):
		self.add_row(renderable)


class Status(Grid):
	def __init__(self, text, **kwargs):
		super().__init__(padding=1, **kwargs)
		self.add_row(Spinner("dots"), Text.from_markup(text))

	def update(self, /, icon=None, text=None):
		if icon is not None:
			self.columns[0]._cells[0] = icon
		if text is not None:
			self.columns[1]._cells[0] = Text.from_markup(text)


class LinesLogHandler(Lines, logging.Handler):
	def __init__(self):
		Lines.__init__(self)
		logging.Handler.__init__(self)

	def emit(self, record):
		self.append(Text.from_markup(record.getMessage()))


class PreviewScript(Panel):
	def __init__(self, scheme: Scheme):
		theme = scheme.syntax_theme
		script = Syntax(
			SAMPLE_CODE[1],
			SAMPLE_CODE[0],
			theme=theme,
			line_numbers=True,
			indent_guides=True,
		)
		theme_border_style = Style(
			color=scheme.base05.hex_l, bgcolor=scheme.base00.hex_l
		)
		super().__init__(
			script,
			title="Preview",
			border_style=theme._border_style,
			padding=0,
		)


class PreviewColors(Panel):
	def __init__(self, scheme: Scheme):
		grid = Table.grid()
		for i in range(0, 16):
			name = f"base{i:02X}"
			color = getattr(scheme, name)
			grid.add_row(
				Text(
					f" {name} ",
					style=Style(color=color.hex_l, bgcolor=scheme.base00.hex_l),
				),
				Text(
					f" {name} ",
					style=Style(color=scheme.base05.hex_l, bgcolor=color.hex_l),
				),
				Text(f" ", style=Style(bgcolor=scheme.base00.hex_l)),
			)
		super().__init__(
			grid,
			title="Colors",
			border_style=scheme.syntax_theme._border_style,
			padding=0,
		)


class Preview(Styled):
	def __init__(self, scheme: Scheme):
		grid = Table.grid(padding=(0, 1), pad_edge=True)
		grid.add_row(
			PreviewColors(scheme),
			PreviewScript(scheme),
		)
		super().__init__(grid, f"on {scheme.base00.hex_l}")


@dataclass
class AppResult:
	has_changes: bool = False
	has_errors: bool = False


def main():
	parser = ArgumentParser()
	parser.add_argument("name")
	parser.add_argument(
		"-d",
		"--dry-run",
		action="store_true",
		help="Don't actually change any files or run any hooks.",
	)
	parser.add_argument(
		"-f",
		"--force-hooks",
		action="store_true",
		help="Run hooks even if none of the rendered files changed.",
	)
	parser.add_argument(
		"-s", "--skip-hooks", action="store_true", help="Don't run hooks."
	)
	parser.add_argument(
		"-u", "--update", action="store_true", help="Update cached schemes."
	)

	args = parser.parse_args()
	if args.force_hooks and args.skip_hooks:
		parser.error("Cannot use --force-hooks and --skip-hooks at the same time.")
	if args.force_hooks and args.dry_run:
		parser.error("Cannot use --force-hooks and --dry-run at the same time.")

	layout = Table.grid(padding=1)
	with Live(layout):
		# Show log output.
		log_lines = LinesLogHandler()
		log.addHandler(log_lines)
		log.setLevel(logging.DEBUG)
		layout.add_row(log_lines)

		# Load config & schemes.
		if args.update:
			log.info("Clearing scheme cache.")
			if CACHE_DIR.exists():
				rmtree(CACHE_DIR)

		config = Config.load()
		schemes = Schemes.init()

		name = config.aliases.get(args.name, args.name)
		scheme = schemes.get(name)
		log.info(f"Using scheme [cyan]{name}[/].")

		# Show preview of the chosen scheme.
		layout.add_row(Preview(scheme))

		# Sort the applications from the config so that ones with dependencies go after their dependencies.
		app_order = toposort({k: v.dependsOn for k, v in config.applications.items()})

		# Update all applications from the config.
		results_box = Table.grid(padding=1)
		layout.add_row(results_box)
		results: dict[str, AppResult] = {}
		for aname in app_order:
			app = config.applications[aname]

			app_box = VBox()
			results_box.add_row(aname, app_box)

			dependencies_results = [results[dname] for dname in app.dependsOn]
			dependencies_result = AppResult(
				has_changes=any(dep.has_changes for dep in dependencies_results),
				has_errors=any(dep.has_errors for dep in dependencies_results),
			)

			app_result = AppResult()
			results[aname] = app_result

			for template in app.templates:
				status = Status(f"Rendering [cyan]{template.output}[/].")
				app_box.add(status)

				try:
					template_has_changes = template.render(scheme, dry_run=args.dry_run)
				except Exception:
					app_result.has_errors = True
					status.update(
						icon=f"[red]{ICON_NOTOK}[/]",
						text=f"[red]Failed to render [cyan]{template.output}[/].[/]",
					)
					app_box.add(Traceback(theme=CURRENT_SYNTAX_THEME))
					continue

				if template_has_changes:
					status.update(
						icon=ICON_SAVE, text=f"Rendered [cyan]{template.output}[/]."
					)
				else:
					status.update(
						icon=ICON_SKIP, text=f"No change to [cyan]{template.output}[/]."
					)

				app_result.has_changes |= template_has_changes

			if app.hook:
				hook = Grid(padding=1)
				hook.add_row(
					ICON_RUN,
					"Hook:",
					Syntax(
						app.hook,
						"bash",
						theme=CURRENT_SYNTAX_THEME,
						code_width=len(app.hook),
					),
				)
				app_box.add(hook)

				status = Status("")
				app_box.add(status)
				if app_result.has_errors:
					status.update(
						icon=ICON_SKIP,
						text="[yellow]Skipping hook because not all renders were successful.[/]",
					)
					continue
				elif dependencies_result.has_errors:
					status.update(
						icon=ICON_SKIP,
						text="[yellow]Skipping hook because not all dependencies were successful.[/]",
					)
					continue
				elif app_result.has_changes:
					reason = "changes in rendered files"
				elif dependencies_result.has_changes:
					reason = "changes in dependencies"
				elif app.hookRunAlways:
					reason = "[cyan]hookRunAlways[/]"
				elif args.force_hooks:
					reason = "[cyan]--force[/]"
				else:
					status.update(
						icon=ICON_SKIP,
						text="Skipping hook because all rendered files were unchanged.",
					)
					continue

				if args.dry_run:
					status.update(
						icon=ICON_SKIP,
						text=f"Skipping despite {reason} because of [cyan]--dry-run[/].",
					)
					continue

				status.update(text=f"Running hook because of {reason}")

				proc = run(
					f"set -o errexit -o pipefail; {app.hook}",
					shell=True,
					stdout=PIPE,
					stderr=STDOUT,
				)
				if proc.returncode == 0:
					status.update(
						icon=ICON_OK,
						text=f"Hook was successful, ran because of {reason}.",
					)
				else:
					app_result.has_errors = False
					status.update(
						icon=ICON_NOTOK,
						text=f"[red]Hook failed ({proc.returncode}).[/]",
					)

				output = proc.stdout.decode("utf-8")
				if output.endswith(
					"\n"
				):	# Drop only a single ending newline, not multiple.
					output = output[:-1]
				if output:
					app_box.add(Panel(output))

		if any(result.has_errors for result in results.values()):
			exit(1)


if __name__ == "__main__":
	main()
